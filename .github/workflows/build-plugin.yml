name: Build CyanoFactions

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      artifact-name: ${{ steps.get-version.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Get version information
        id: get-version
        run: |
          VERSION=$(./gradlew properties -q | grep "^version:" | awk '{print $2}')
          COMMIT_SHA=$(git rev-parse --short HEAD)
          ARTIFACT_NAME="CyanoFactions-${VERSION}-${COMMIT_SHA}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "Plugin version: ${VERSION}"
          echo "Artifact name: ${ARTIFACT_NAME}"

      - name: Run tests
        run: ./gradlew test --no-daemon --continue

      - name: Build plugin JAR
        run: ./gradlew shadowJar --no-daemon

      - name: Verify JAR was created
        run: |
          if [ ! -f "build/libs/CyanoFactions-${{ steps.get-version.outputs.version }}.jar" ]; then
            echo "❌ JAR file not found!"
            ls -la build/libs/
            exit 1
          fi
          echo "✅ JAR file created successfully"

      - name: Rename JAR with commit info
        run: |
          cd build/libs
          mv "CyanoFactions-${{ steps.get-version.outputs.version }}.jar" "${{ steps.get-version.outputs.artifact-name }}.jar"
          echo "✅ JAR renamed to: ${{ steps.get-version.outputs.artifact-name }}.jar"

      - name: Upload CyanoFactions JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-version.outputs.artifact-name }}
          path: build/libs/${{ steps.get-version.outputs.artifact-name }}.jar
          retention-days: 30
          compression-level: 9

      - name: Upload test results (if tests ran)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            build/test-results/**/*.xml
            build/reports/tests/
          retention-days: 14

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🏗️ CyanoFactions Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** ${{ needs.build.outputs.artifact-name }}.jar" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Plugin built successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 Download the JAR from the artifacts section above." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the build logs for details." >> $GITHUB_STEP_SUMMARY
          fi
